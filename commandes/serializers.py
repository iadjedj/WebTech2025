from rest_framework import serializers
from .models import Produit, Sandwich, Commande, Addstock, Temperature

class ProduitSerializer(serializers.ModelSerializer):
    class Meta:
        model = Produit
        fields = '__all__'  # Inclut tous les champs du modÃ¨le

class SandwichSerializer(serializers.ModelSerializer):
    produits = ProduitSerializer(many=True, read_only=True)  # ğŸ”¥ Retourne la liste des produits sous forme dâ€™objets

    class Meta:
        model = Sandwich
        fields = '__all__'

    def create(self, validated_data):
        """ ğŸ”¹ Permet d'ajouter un sandwich avec ses produits """
        produits_data = validated_data.pop('produits', [])  # RÃ©cupÃ©rer les produits sÃ©lectionnÃ©s
        sandwich = Sandwich.objects.create(**validated_data)  # CrÃ©er le sandwich
        sandwich.produits.set(produits_data)  # Ajouter les produits
        return sandwich

    def update(self, instance, validated_data):
        """ ğŸ”¹ Permet de modifier un sandwich avec ses produits """
        produits_data = validated_data.pop('produits', None)  # RÃ©cupÃ©rer les produits sÃ©lectionnÃ©s
        for attr, value in validated_data.items():
            setattr(instance, attr, value)  # Mettre Ã  jour les autres champs

        if produits_data is not None:
            instance.produits.set(produits_data)  # Mettre Ã  jour les produits liÃ©s

        instance.save()
        return instance

class CommandeSerializer(serializers.ModelSerializer):
    sandwich = SandwichSerializer(read_only=True)  # ğŸ”¥ Retourne un objet Sandwich au lieu dâ€™un ID

    class Meta:
        model = Commande
        fields = '__all__'

class TemperatureSerializer(serializers.ModelSerializer):
    class Meta:
        model = Temperature
        fields = ['date_heure', 'temperature', 'humidite']  # Utilise 'date_heure' au lieu de 'created_at'

class AddstockSerializer(serializers.ModelSerializer):
    class Meta:
        model = Addstock
        fields = ['id', 'nom', 'taille', 'quantite_stock']

    def create(self, validated_data):
        """ ğŸ”¹ Ajoute du stock Ã  un produit existant ou crÃ©e un nouveau produit """
        produit, created = Produit.objects.get_or_create(
            nom=validated_data["nom"],
            taille=validated_data.get("taille", "M"),  # Par dÃ©faut, taille moyenne
            defaults={"quantite_stock": 0}  # Initialise la quantitÃ© Ã  0
        )

        # ğŸ”¹ Met Ã  jour le stock
        produit.quantite_stock += validated_data["quantite_stock"]
        produit.save()
        
        return produit
